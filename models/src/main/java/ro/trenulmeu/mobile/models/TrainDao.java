package ro.trenulmeu.mobile.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ro.trenulmeu.mobile.timespan.TimeSpan;
import ro.trenulmeu.mobile.timespan.TimeSpanAdapter;

import ro.trenulmeu.mobile.models.Train;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Train".
*/
public class TrainDao extends AbstractDao<Train, Long> {

    public static final String TABLENAME = "Train";

    /**
     * Properties of entity Train.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property OperatorId = new Property(1, Long.class, "OperatorId", false, "OperatorId");
        public final static Property TypeId = new Property(2, Long.class, "TypeId", false, "TypeId");
        public final static Property ServiceId = new Property(3, Long.class, "ServiceId", false, "ServiceId");
        public final static Property Name = new Property(4, String.class, "Name", false, "Name");
        public final static Property OriginalName = new Property(5, String.class, "OriginalName", false, "OriginalName");
        public final static Property FromId = new Property(6, Long.class, "FromId", false, "FromId");
        public final static Property ToId = new Property(7, Long.class, "ToId", false, "ToId");
        public final static Property FromName = new Property(8, String.class, "FromName", false, "FromName");
        public final static Property ToName = new Property(9, String.class, "ToName", false, "ToName");
        public final static Property FromTimeOffset = new Property(10, Byte.class, "FromTimeOffset", false, "FromTimeOffset");
        public final static Property ToTimeOffset = new Property(11, Byte.class, "ToTimeOffset", false, "ToTimeOffset");
        public final static Property FromTime = new Property(12, Short.class, "FromTime", false, "FromTime");
        public final static Property ToTime = new Property(13, Short.class, "ToTime", false, "ToTime");
        public final static Property TotalTime = new Property(14, Short.class, "TotalTime", false, "TotalTime");
    };

    private DaoSession daoSession;

    private final TimeSpanAdapter FromTimeConverter = new TimeSpanAdapter();
    private final TimeSpanAdapter ToTimeConverter = new TimeSpanAdapter();
    private final TimeSpanAdapter TotalTimeConverter = new TimeSpanAdapter();
    private Query<Train> trainOperator_TrainsQuery;
    private Query<Train> trainType_TrainsQuery;
    private Query<Train> trainService_TrainsQuery;

    public TrainDao(DaoConfig config) {
        super(config);
    }
    
    public TrainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Train\" (" + //
                "\"Id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OperatorId\" INTEGER," + // 1: OperatorId
                "\"TypeId\" INTEGER," + // 2: TypeId
                "\"ServiceId\" INTEGER," + // 3: ServiceId
                "\"Name\" TEXT," + // 4: Name
                "\"OriginalName\" TEXT," + // 5: OriginalName
                "\"FromId\" INTEGER," + // 6: FromId
                "\"ToId\" INTEGER," + // 7: ToId
                "\"FromName\" TEXT," + // 8: FromName
                "\"ToName\" TEXT," + // 9: ToName
                "\"FromTimeOffset\" INTEGER," + // 10: FromTimeOffset
                "\"ToTimeOffset\" INTEGER," + // 11: ToTimeOffset
                "\"FromTime\" INTEGER," + // 12: FromTime
                "\"ToTime\" INTEGER," + // 13: ToTime
                "\"TotalTime\" INTEGER);"); // 14: TotalTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Train\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Train entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long OperatorId = entity.getOperatorId();
        if (OperatorId != null) {
            stmt.bindLong(2, OperatorId);
        }
 
        Long TypeId = entity.getTypeId();
        if (TypeId != null) {
            stmt.bindLong(3, TypeId);
        }
 
        Long ServiceId = entity.getServiceId();
        if (ServiceId != null) {
            stmt.bindLong(4, ServiceId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(5, Name);
        }
 
        String OriginalName = entity.getOriginalName();
        if (OriginalName != null) {
            stmt.bindString(6, OriginalName);
        }
 
        Long FromId = entity.getFromId();
        if (FromId != null) {
            stmt.bindLong(7, FromId);
        }
 
        Long ToId = entity.getToId();
        if (ToId != null) {
            stmt.bindLong(8, ToId);
        }
 
        String FromName = entity.getFromName();
        if (FromName != null) {
            stmt.bindString(9, FromName);
        }
 
        String ToName = entity.getToName();
        if (ToName != null) {
            stmt.bindString(10, ToName);
        }
 
        Byte FromTimeOffset = entity.getFromTimeOffset();
        if (FromTimeOffset != null) {
            stmt.bindLong(11, FromTimeOffset);
        }
 
        Byte ToTimeOffset = entity.getToTimeOffset();
        if (ToTimeOffset != null) {
            stmt.bindLong(12, ToTimeOffset);
        }
 
        TimeSpan FromTime = entity.getFromTime();
        if (FromTime != null) {
            stmt.bindLong(13, FromTimeConverter.convertToDatabaseValue(FromTime));
        }
 
        TimeSpan ToTime = entity.getToTime();
        if (ToTime != null) {
            stmt.bindLong(14, ToTimeConverter.convertToDatabaseValue(ToTime));
        }
 
        TimeSpan TotalTime = entity.getTotalTime();
        if (TotalTime != null) {
            stmt.bindLong(15, TotalTimeConverter.convertToDatabaseValue(TotalTime));
        }
    }

    @Override
    protected void attachEntity(Train entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Train readEntity(Cursor cursor, int offset) {
        Train entity = new Train( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // OperatorId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // TypeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // ServiceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OriginalName
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // FromId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // ToId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FromName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ToName
            cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10), // FromTimeOffset
            cursor.isNull(offset + 11) ? null : (byte) cursor.getShort(offset + 11), // ToTimeOffset
            cursor.isNull(offset + 12) ? null : FromTimeConverter.convertToEntityProperty(cursor.getShort(offset + 12)), // FromTime
            cursor.isNull(offset + 13) ? null : ToTimeConverter.convertToEntityProperty(cursor.getShort(offset + 13)), // ToTime
            cursor.isNull(offset + 14) ? null : TotalTimeConverter.convertToEntityProperty(cursor.getShort(offset + 14)) // TotalTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Train entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperatorId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTypeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setServiceId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginalName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFromId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setToId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFromName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFromTimeOffset(cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10));
        entity.setToTimeOffset(cursor.isNull(offset + 11) ? null : (byte) cursor.getShort(offset + 11));
        entity.setFromTime(cursor.isNull(offset + 12) ? null : FromTimeConverter.convertToEntityProperty(cursor.getShort(offset + 12)));
        entity.setToTime(cursor.isNull(offset + 13) ? null : ToTimeConverter.convertToEntityProperty(cursor.getShort(offset + 13)));
        entity.setTotalTime(cursor.isNull(offset + 14) ? null : TotalTimeConverter.convertToEntityProperty(cursor.getShort(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Train entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Train entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Trains" to-many relationship of TrainOperator. */
    public List<Train> _queryTrainOperator_Trains(Long OperatorId) {
        synchronized (this) {
            if (trainOperator_TrainsQuery == null) {
                QueryBuilder<Train> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OperatorId.eq(null));
                queryBuilder.orderRaw("T.'Name' ASC");
                trainOperator_TrainsQuery = queryBuilder.build();
            }
        }
        Query<Train> query = trainOperator_TrainsQuery.forCurrentThread();
        query.setParameter(0, OperatorId);
        return query.list();
    }

    /** Internal query to resolve the "Trains" to-many relationship of TrainType. */
    public List<Train> _queryTrainType_Trains(Long TypeId) {
        synchronized (this) {
            if (trainType_TrainsQuery == null) {
                QueryBuilder<Train> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TypeId.eq(null));
                queryBuilder.orderRaw("T.'Name' ASC");
                trainType_TrainsQuery = queryBuilder.build();
            }
        }
        Query<Train> query = trainType_TrainsQuery.forCurrentThread();
        query.setParameter(0, TypeId);
        return query.list();
    }

    /** Internal query to resolve the "Trains" to-many relationship of TrainService. */
    public List<Train> _queryTrainService_Trains(Long ServiceId) {
        synchronized (this) {
            if (trainService_TrainsQuery == null) {
                QueryBuilder<Train> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ServiceId.eq(null));
                queryBuilder.orderRaw("T.'Name' ASC");
                trainService_TrainsQuery = queryBuilder.build();
            }
        }
        Query<Train> query = trainService_TrainsQuery.forCurrentThread();
        query.setParameter(0, ServiceId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTrainOperatorDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTrainTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTrainServiceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getStationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getStationDao().getAllColumns());
            builder.append(" FROM Train T");
            builder.append(" LEFT JOIN TrainOperator T0 ON T.\"OperatorId\"=T0.\"Id\"");
            builder.append(" LEFT JOIN TrainType T1 ON T.\"TypeId\"=T1.\"Id\"");
            builder.append(" LEFT JOIN TrainService T2 ON T.\"ServiceId\"=T2.\"Id\"");
            builder.append(" LEFT JOIN Station T3 ON T.\"FromId\"=T3.\"Id\"");
            builder.append(" LEFT JOIN Station T4 ON T.\"ToId\"=T4.\"Id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Train loadCurrentDeep(Cursor cursor, boolean lock) {
        Train entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TrainOperator Operator = loadCurrentOther(daoSession.getTrainOperatorDao(), cursor, offset);
        entity.setOperator(Operator);
        offset += daoSession.getTrainOperatorDao().getAllColumns().length;

        TrainType TrainType = loadCurrentOther(daoSession.getTrainTypeDao(), cursor, offset);
        entity.setTrainType(TrainType);
        offset += daoSession.getTrainTypeDao().getAllColumns().length;

        TrainService TrainService = loadCurrentOther(daoSession.getTrainServiceDao(), cursor, offset);
        entity.setTrainService(TrainService);
        offset += daoSession.getTrainServiceDao().getAllColumns().length;

        Station From = loadCurrentOther(daoSession.getStationDao(), cursor, offset);
        entity.setFrom(From);
        offset += daoSession.getStationDao().getAllColumns().length;

        Station To = loadCurrentOther(daoSession.getStationDao(), cursor, offset);
        entity.setTo(To);

        return entity;    
    }

    public Train loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Train> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Train> list = new ArrayList<Train>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Train> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Train> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
