package ro.trenulmeu.mobile.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ro.trenulmeu.mobile.models.Station;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Station".
*/
public class StationDao extends AbstractDao<Station, Long> {

    public static final String TABLENAME = "Station";

    /**
     * Properties of entity Station.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property Name = new Property(1, String.class, "Name", false, "Name");
        public final static Property Lat = new Property(2, Float.class, "Lat", false, "Lat");
        public final static Property Lon = new Property(3, Float.class, "Lon", false, "Lon");
        public final static Property TimeOffset = new Property(4, Byte.class, "TimeOffset", false, "TimeOffset");
    };


    public StationDao(DaoConfig config) {
        super(config);
    }
    
    public StationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Station\" (" + //
                "\"Id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"Name\" TEXT," + // 1: Name
                "\"Lat\" REAL," + // 2: Lat
                "\"Lon\" REAL," + // 3: Lon
                "\"TimeOffset\" INTEGER);"); // 4: TimeOffset
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Station\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Station entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        Float Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(3, Lat);
        }
 
        Float Lon = entity.getLon();
        if (Lon != null) {
            stmt.bindDouble(4, Lon);
        }
 
        Byte TimeOffset = entity.getTimeOffset();
        if (TimeOffset != null) {
            stmt.bindLong(5, TimeOffset);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Station readEntity(Cursor cursor, int offset) {
        Station entity = new Station( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // Lat
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // Lon
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4) // TimeOffset
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Station entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLat(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLon(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setTimeOffset(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Station entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Station entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
