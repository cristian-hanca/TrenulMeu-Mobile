package ro.trenulmeu.mobile.models;

import java.util.List;
import ro.trenulmeu.mobile.models.DaoSession;
import de.greenrobot.dao.DaoException;

import ro.trenulmeu.mobile.timespan.TimeSpan;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.joda.time.DateTime;
import java.util.Date;
// KEEP INCLUDES END
/**
 * Entity mapped to table "Train".
 */
public class Train {

    private Long id;
    private Long OperatorId;
    private Long TypeId;
    private Long ServiceId;
    private String Name;
    private String OriginalName;
    private Long FromId;
    private Long ToId;
    private String FromName;
    private String ToName;
    private Byte FromTimeOffset;
    private Byte ToTimeOffset;
    private TimeSpan FromTime;
    private TimeSpan ToTime;
    private TimeSpan TotalTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrainDao myDao;

    private TrainOperator Operator;
    private Long Operator__resolvedKey;

    private TrainType TrainType;
    private Long TrainType__resolvedKey;

    private TrainService TrainService;
    private Long TrainService__resolvedKey;

    private Station From;
    private Long From__resolvedKey;

    private Station To;
    private Long To__resolvedKey;

    private List<TrainAvailability> Availability;
    private List<TrainPath> Path;

    // KEEP FIELDS - put your custom fields here
    private List<TrainPath> Stop;
    // KEEP FIELDS END

    public Train() {
    }

    public Train(Long id) {
        this.id = id;
    }

    public Train(Long id, Long OperatorId, Long TypeId, Long ServiceId, String Name, String OriginalName, Long FromId, Long ToId, String FromName, String ToName, Byte FromTimeOffset, Byte ToTimeOffset, TimeSpan FromTime, TimeSpan ToTime, TimeSpan TotalTime) {
        this.id = id;
        this.OperatorId = OperatorId;
        this.TypeId = TypeId;
        this.ServiceId = ServiceId;
        this.Name = Name;
        this.OriginalName = OriginalName;
        this.FromId = FromId;
        this.ToId = ToId;
        this.FromName = FromName;
        this.ToName = ToName;
        this.FromTimeOffset = FromTimeOffset;
        this.ToTimeOffset = ToTimeOffset;
        this.FromTime = FromTime;
        this.ToTime = ToTime;
        this.TotalTime = TotalTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrainDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getOperatorId() {
        return OperatorId;
    }

    public void setOperatorId(Long OperatorId) {
        this.OperatorId = OperatorId;
    }

    public Long getTypeId() {
        return TypeId;
    }

    public void setTypeId(Long TypeId) {
        this.TypeId = TypeId;
    }

    public Long getServiceId() {
        return ServiceId;
    }

    public void setServiceId(Long ServiceId) {
        this.ServiceId = ServiceId;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getOriginalName() {
        return OriginalName;
    }

    public void setOriginalName(String OriginalName) {
        this.OriginalName = OriginalName;
    }

    public Long getFromId() {
        return FromId;
    }

    public void setFromId(Long FromId) {
        this.FromId = FromId;
    }

    public Long getToId() {
        return ToId;
    }

    public void setToId(Long ToId) {
        this.ToId = ToId;
    }

    public String getFromName() {
        return FromName;
    }

    public void setFromName(String FromName) {
        this.FromName = FromName;
    }

    public String getToName() {
        return ToName;
    }

    public void setToName(String ToName) {
        this.ToName = ToName;
    }

    public Byte getFromTimeOffset() {
        return FromTimeOffset;
    }

    public void setFromTimeOffset(Byte FromTimeOffset) {
        this.FromTimeOffset = FromTimeOffset;
    }

    public Byte getToTimeOffset() {
        return ToTimeOffset;
    }

    public void setToTimeOffset(Byte ToTimeOffset) {
        this.ToTimeOffset = ToTimeOffset;
    }

    public TimeSpan getFromTime() {
        return FromTime;
    }

    public void setFromTime(TimeSpan FromTime) {
        this.FromTime = FromTime;
    }

    public TimeSpan getToTime() {
        return ToTime;
    }

    public void setToTime(TimeSpan ToTime) {
        this.ToTime = ToTime;
    }

    public TimeSpan getTotalTime() {
        return TotalTime;
    }

    public void setTotalTime(TimeSpan TotalTime) {
        this.TotalTime = TotalTime;
    }

    /** To-one relationship, resolved on first access. */
    public TrainOperator getOperator() {
        Long __key = this.OperatorId;
        if (Operator__resolvedKey == null || !Operator__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainOperatorDao targetDao = daoSession.getTrainOperatorDao();
            TrainOperator OperatorNew = targetDao.load(__key);
            synchronized (this) {
                Operator = OperatorNew;
            	Operator__resolvedKey = __key;
            }
        }
        return Operator;
    }

    public void setOperator(TrainOperator Operator) {
        synchronized (this) {
            this.Operator = Operator;
            OperatorId = Operator == null ? null : Operator.getId();
            Operator__resolvedKey = OperatorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TrainType getTrainType() {
        Long __key = this.TypeId;
        if (TrainType__resolvedKey == null || !TrainType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainTypeDao targetDao = daoSession.getTrainTypeDao();
            TrainType TrainTypeNew = targetDao.load(__key);
            synchronized (this) {
                TrainType = TrainTypeNew;
            	TrainType__resolvedKey = __key;
            }
        }
        return TrainType;
    }

    public void setTrainType(TrainType TrainType) {
        synchronized (this) {
            this.TrainType = TrainType;
            TypeId = TrainType == null ? null : TrainType.getId();
            TrainType__resolvedKey = TypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TrainService getTrainService() {
        Long __key = this.ServiceId;
        if (TrainService__resolvedKey == null || !TrainService__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainServiceDao targetDao = daoSession.getTrainServiceDao();
            TrainService TrainServiceNew = targetDao.load(__key);
            synchronized (this) {
                TrainService = TrainServiceNew;
            	TrainService__resolvedKey = __key;
            }
        }
        return TrainService;
    }

    public void setTrainService(TrainService TrainService) {
        synchronized (this) {
            this.TrainService = TrainService;
            ServiceId = TrainService == null ? null : TrainService.getId();
            TrainService__resolvedKey = ServiceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Station getFrom() {
        Long __key = this.FromId;
        if (From__resolvedKey == null || !From__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationDao targetDao = daoSession.getStationDao();
            Station FromNew = targetDao.load(__key);
            synchronized (this) {
                From = FromNew;
            	From__resolvedKey = __key;
            }
        }
        return From;
    }

    public void setFrom(Station From) {
        synchronized (this) {
            this.From = From;
            FromId = From == null ? null : From.getId();
            From__resolvedKey = FromId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Station getTo() {
        Long __key = this.ToId;
        if (To__resolvedKey == null || !To__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationDao targetDao = daoSession.getStationDao();
            Station ToNew = targetDao.load(__key);
            synchronized (this) {
                To = ToNew;
            	To__resolvedKey = __key;
            }
        }
        return To;
    }

    public void setTo(Station To) {
        synchronized (this) {
            this.To = To;
            ToId = To == null ? null : To.getId();
            To__resolvedKey = ToId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrainAvailability> getAvailability() {
        if (Availability == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainAvailabilityDao targetDao = daoSession.getTrainAvailabilityDao();
            List<TrainAvailability> AvailabilityNew = targetDao._queryTrain_Availability(id);
            synchronized (this) {
                if(Availability == null) {
                    Availability = AvailabilityNew;
                }
            }
        }
        return Availability;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAvailability() {
        Availability = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrainPath> getPath() {
        if (Path == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainPathDao targetDao = daoSession.getTrainPathDao();
            List<TrainPath> PathNew = targetDao._queryTrain_Path(id);
            synchronized (this) {
                if(Path == null) {
                    Path = PathNew;
                }
            }
        }
        return Path;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPath() {
        Path = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrainPath> getStops() {
        if (Stop == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainPathDao targetDao = daoSession.getTrainPathDao();
            List<TrainPath> StopNew = targetDao.queryBuilder()
                    .where(TrainPathDao.Properties.TrainId.eq(id), TrainPathDao.Properties.IsStop.eq(true))
                    .orderAsc(TrainPathDao.Properties.Km)
                    .list();
            synchronized (this) {
                if(Stop == null) {
                    Stop = StopNew;
                }
            }
        }
        return Stop;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStops() {
        Stop = null;
    }

    public boolean runsOnDate(Date date) {
        for (TrainAvailability a : getAvailability()) {
            if (a.runsOnDate(date)) {
                return true;
            }
        }
        return false;
    }

    public boolean runsOnDateTime(Date date) {
        for (TrainAvailability a : getAvailability()) {
            if (a.runsOnDate(date)) {
                short now = (short) new DateTime(date).getMinuteOfDay();
                short from = getFromTime().getTicks();
                short to = getToTime().getTicks();

                while (now < to) {
                    if (from < now && now < to) {
                        return true;
                    }
                    now += 60 * 24;
                }
                return false;
            }
        }
        return false;
    }
    // KEEP METHODS END

}
